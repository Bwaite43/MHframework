mhq.QuestAdded = function(eventCode, journalIndex, questName, objectiveName)	for k,v in pairs(mhq.QuestsToAbandon) do		if v == questName then			AbandonQuest(journalIndex)			d("[MHQ] Auto-Declining quest: "..questName)			return;		end	end	mhq.lastQuestAdded = journalIndex	d("[MHQ] Accepted quest: "..questName)	if GetIsQuestSharable(journalIndex) then		if mhq.SetToAlwaysShare[1] == "on" then			ShareQuest(journalIndex)		else			for k,v in pairs(mhq.QuestsToShare) do				if v == questName then					ShareQuest(journalIndex)				end			end		end	end	if mhq.SetToAlwaysTrack[1] == "on" then		mhq.Track(journalIndex)	endendmhq.Track = function(idx)	local targ = mhq.GetIndex(idx)	if targ == 0 then return end	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(targ)	ZO_Tracker:SetTracked( targ, tracked )endmhq.Abandon = function(text)	local targ = mhq.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] Abandoning Quest "..targ..": "..questName)	AbandonQuest(targ)endmhq.BlackList = function(text)	local targ = mhq.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] BlackListing Quest "..targ..": "..questName)	AbandonQuest(targ)	table.insert(mhq.QuestsToAbandon, questName)endmhq.Share = function(text)	local targ = mhq.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] Sharing Quest "..targ..": "..questName)	ShareQuest(targ)endmhq.WhiteList = function(text)	local targ = mhq.GetIndex(text)	if targ == 0 then return end	local questName = GetJournalQuestName(targ)	d("[MHQ] WhiteListing Quest "..targ..": "..questName)	ShareQuest(targ)	table.insert(mhq.QuestsToShare, questName)endmhq.ListAll = function()	local quests = {}	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType	local zoneName, objectiveName, zoneIndex, poiIndex	for ii = 1, 25, 1 do		questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(ii)		zoneName, objectiveName, zoneIndex, poiIndex = GetJournalQuestLocationInfo(ii)		if questName ~= "" then			if zoneName ~= "" then				if not quests[zoneName] then quests[zoneName] = {} end				quests[zoneName][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..questName			else				if not quests["Guild"] then quests["Guild"] = {} end				quests["Guild"][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..questName			end		end	end	for z,i in pairs(quests) do		d("[MHQ] "..z)		for _,q in pairs(i) do d(q) end	endendmhq.Find = function(text)	local searchParms = text	if searchParms == nil then return end	searchParms = string.lower(searchParms.."")	searchParms = searchParms:gsub("find","")	local quests = {}	local questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType	local zoneName, objectiveName, zoneIndex, poiIndex	for searchFor in searchParms:gmatch("%w+") do		if searchFor ~= "" then			for ii = 1, 25, 1 do				questName, backgroundText, activeStepText, activeStepType, activeStepTrackerOverrideText, completed, tracked, questLevel, pushed, questType = GetJournalQuestInfo(ii)				zoneName, objectiveName, zoneIndex, poiIndex = GetJournalQuestLocationInfo(ii)				if questName ~= "" then					if zoneName == "" then zoneName = "Guild" end					local key = zoneName					local descr = questName					zoneName = string.lower(zoneName)					questName = string.lower(questName)					questLevel = questLevel..""										local foundMatch = false					if searchFor == questLevel then foundMatch = true end					if string.find(questName, searchFor) then foundMatch = true end					if string.find(zoneName, searchFor) then foundMatch = true end										if foundMatch then						if not quests[key] then quests[key] = {} end						if not quests[key][ii] then quests[key][ii] = "[MHQ] - "..ii..": ["..questLevel.."] "..descr end					end				end			end		end	end	for z,i in pairs(quests) do		d("[MHQ] "..z)		for _,q in pairs(i) do d(q) end	endendmhq.GetIndex = function(str)	local targ = 0	if str == nil or str == "" then 		targ = mhq.lastQuestAdded 	else		targ = str+0	end	if targ == 0 or targ == nil then return 0 end	return targend